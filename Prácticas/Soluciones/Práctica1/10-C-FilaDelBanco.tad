// Práctica 1 - Ejercicio 10-C

TAD Fila
    igualdad observacional
        (∀f1,f2: fila)(f1 =obs f2 ⟺ (
            (∀p: persona)(
                esperando(p, f1) =obs esperando(p, f2)
                ∧L (esperando(p, f1) ⟹L (
                    posición(p, f1) =obs posición(p, f2)
                    ∧ seColó(p, f1) =obs seColó(p, f2)
                ))
                ∧ entró?(p, f1) =obs entró?(p, f2)
                ∧ fueAtendido?(p, f1) =obs fueAtendido?(p, f2)
            )
        ))
    géneros fila
    exporta fila, generadores, observadores
    usa Nat, Bool
    observadores básicos
        esperando: persona × fila → bool
        posición: persona p × fila f → nat {esperando(p, f)}
        seColó?: persona p × fila f → bool {esperando(p, f)}
        entró?: persona × fila → bool
        fueAtendido?: persona × fila → bool
    generadores
        abrirVentanilla: → fila
        llegar: persona p × fila f → fila {¬esperando(p, f)}
        atender: fila f → fila {¬vacía(f)}
        colarseAdelanteDe: persona p × persona q × fila f → fila {¬esperando(p, f) ∧ esperando(q, f)}
        retirarse: persona p × fila f → fila {esperando(p, f)}
    otras operaciones
        longitud: fila → nat
        vacía: fila → bool
    axiomas
        ∀f: fila, ∀p,q,r: persona

        esperando(p, abrirVentanilla()) ≡ false
        esperando(q, llegar(p, f)) ≡ q =obs p ∨ esperando(q, f)
        esperando(p, atender(f)) ≡ esperando(p, f) ∧L posición(p, f) > 1
        esperando(r, colarseAdelanteDe(p, q, f)) ≡ r =obs p ∨ esperando(r, f)
        esperando(q, retirarse(p, f)) ≡ q ≠obs p ∧ esperando(q, f)

        posición(q, llegar(p, f)) ≡ if q =obs p then longitud(f) + 1 else posición(q, f) fi
        posición(p, atender(f)) ≡ posición(p, f) - 1
        posición(r, colarseAdelanteDe(p, q, f)) ≡
            if r =obs p then
                posición(q, f)
            else
                posición(r, f) + β(posición(q, f) ≤ posición(r, f))
            fi
        posición(q, retirarse(p, f)) ≡ posición(q, f) - β(posición(p, f) < posición(q, f))

        seColó(q, llegar(p, f)) ≡ q ≠obs p ∧ seColó(q, f)
        seColó(p, atender(f)) ≡ seColó(p, f)
        seColó(r, colarseAdelanteDe(p, q, f)) ≡ r =obs p ∨ seColó(r, f)
        seColó(q, retirarse(p, f)) ≡ seColó(q, f)

        entró?(p, abrirVentanilla()) ≡ false
        entró?(q, llegar(p, f)) ≡ q =obs p ∨ entró?(q, f)
        entró?(q, atender(f)) ≡ entró?(q, f)
        entró?(r, colarseAdelanteDe(p, q, f)) ≡ r =obs q ∨ entró?(r, f)
        entró?(q, retirarse(p, f)) ≡ entró?(q, f)

        fueAtendido?(p, abrirVentanilla()) ≡ false
        fueAtendido?(q, llegar(p, f)) ≡ fueAtendido?(q, f)
        fueAtendido?(q, atender(f)) ≡ (esperando(q, f) ∧L posición(q, f) =obs 1) ∨ fueAtendido?(q, f)
        fueAtendido?(r, colarseAdelanteDe(p, q, f)) ≡ fueAtendido?(r, f)
        fueAtendido?(q, retirarse(p, f)) ≡ fueAtendido?(q, f)

        longitud(abrirVentanilla()) ≡ 0
        longitud(llegar(p, f)) ≡ longitud(f) + 1
        longitud(atender(f)) ≡ longitud(f) - 1
        longitud(colarseAdelanteDe(p, q, f)) ≡ longitud(f) + 1
        longitud(retirarse(p, f)) ≡ longitud(f) - 1

        vacía(f) ≡ longitud(f) =obs 0
Fin TAD

// Identifico a las personas por nombre.
// Ya se que no existe el TAD String, pero es básicamente una secuencia de chars.
// También se que no existe el TAD char, pero es básicamente un número natural que mapea a un determinado símbolo.
TAD Persona es String
